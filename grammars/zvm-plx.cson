
# Change summary
# - Wrote syntax rules based on Walter Church's internal set, then re-wrote
#   some of them based on PLAS 1.4.2 Language Reference
# - Added COPY file type for macros

# - This grammar assumes standard compiler margins of 2,72.  It's fairly common for bilingual macros to depend on those margin values.
#   Otherwise, its strategy is very different than the assembler grammar, because assembler is more line-oriented.
# - Grammar for generated assembler assumes genmargins 1,72.  It's fairly common for bilingual macros to depend on those genmargin values.
#   - 1: blank, except in generated assembler code
#   - 2-72: statements
#   - 73-80: identification sequence numbers (optional)

# After editing this file, CTL-SHIFT-F5 or C-S-P window:reload to update the active editor with the revised grammar.
# editor:log-cursor-scope to see which selectors (example: comment.block.zvmasm) the grammar applies at the cursor's location.
# Behavioral notes
# - If a line matches line-too-long, it does NOT match others like uncontinued-statement (provable using editor:log-cursor-scope)

'scopeName': 'source.zvmplx'
'name': 'PL/I'
'fileTypes': ['PLX','PLXCOPY', 'PLXMACRO',PL1,PLI]

'patterns': [
    { 'include': '#line-too-long-rule' },
    { 'include': '#sequence-number-rule' },
    { 'include': '#register-variable-rule'},
    { 'include': '#block-logic-rule' },
    { 'include': '#block-comment-rule' },
    { 'include': '#line-comment-rule' },
    { 'include': '#numeric-constant-rule' },
    { 'include': '#binary-constant-rule' },
    { 'include': '#hexadecimal-constant-rule' },
    { 'include': '#block-generate-rule' },
    { 'include': '#single-quoted-string-rule' },
    { 'include': '#double-quoted-string-rule' },
    { 'include': '#macro-include-rule' },
    { 'include': '#macro-general-rule' },
    { 'include': '#label-general-rule' },
    { 'include': '#eject-control-rule' },
    { 'include': '#list-control1-rule' },
    { 'include': '#list-control2-rule' },
    { 'include': '#list-control3-rule' },
    { 'include': '#list-control4-rule' },
    { 'include': '#begin-statement-rule' },

    {
      'match': '([@]((?i)ASSERT|CREATE|DISABLE|ENABLE|ENDCREATE|ENDLOGIC|ENDSEGMENT|FORMAT|INCLUDE|LOGIC|PROCESS|PUSH|POP|SEGMENT|SPACE|PROCESS|ENDGEN|LIST))\\s*(\\w*)'
      'captures':
        '0':
            'name': 'constant.language.zvmplx' # 'entity.name.function.zvmplx'
        '1':
            'name': 'keyword.control.zvmplx' # @EJECT
        '2':
            'name': 'keyword.control.zvmplx' # EJECT
        '3':
            'name': 'entity.name.function.zvmplx'
      'name':  'constant.language.zvmplx' #'entity.name.function.zvmplx'
    }
    {
      'match': '^[^\\*\\s]*\\b'
      'captures':
          '0':
              'name': 'entity.name.function.zvmplx'
      'name': 'meta.function.zvmplx'
    }
    {
      'match': '\\b((?i)ASM|break|case|continue|default|DO|SELECT|to|UNTIL|ELSE|END|for|fortran|goto|IF|THEN|WHEN|OTHERWISE|REPEAT|return|sizeof|struct|switch|typedef|union|WHILE|DECLARE|DCL|INCLUDE|RFY|RESPECIFY|UNRESTRICTED|UNRSTD|RESTRICTED|RSTD|REFS|NOREFS|SETS|NOSETS|L|RETCODE|GENERATE|GEN|DEFS|NODEFS|AMODE|ENVIRONMENT|EXIT|NOEXIT|FLOWS|NOFLOWS|OPTACROSS|SEQFLOW|NOSEQFLOW|WITHBASEREG)\\b(\\s*)'
      'name': 'keyword.control.zvmplx'
    }
    {
      'match': '\\b((?i)_Bool|_Complex|_Imaginary|bool|char|double|float|int|long|short|signed|size_t|unsigned_of|signed_of|void|BINARY|COMPLEX|DECIMAL|ENTRY|FILE|FIXED|PICTURE|PRECISION|REAL|RETURNS|STRUCTURE|VARYING|VARYING4|VARYINGZ|WIDECHAR|TYPE|BIT|CHAR|CONSTANT|POINTER|PTR|SYSLIB|DEFINED|CHARACTER|DESTROY|NONLOCAL|EXTERNAL|SYSUT5|ABS|ALET|ARGADDR|ARGCOUNT|AUTOSIZE|BIT_OF|BITPOS|CacheLnExcl|CLExcl|ARGADDR|CHAR_OF|CONDCODEMASK|CCMASK|DIM|EVAL|FIXED_OF|HBOUND|HVAL_OF|IGNREADONLY|IGNRO|INDEX|LBOUND|LVAL_OF|LVAL|ARGADDR|OFFSET|OMITTED|POINTER_OF|PTR_OF|PTROFF|SIZE|SPACEID|STORAGE|SUBSTRLEN|SYSDATE|SYSDATEC|SYSPARM|SYSTIME|TRANSLATE|TRANS|VERIFY|VET|VIAADDR|VIAPOINTER|VIAPTR|NULL|MAX|MIN|TRUE|FALSE|ON|OFF|YES|NO|__LINE__|__DATA__|__FILE__|__func__|__TIME__|__STDC__|LOCK|ACTION|HOLD|CODE|BDY|BOUNDARY)\\b(\\s*)'
      'name': 'storage.type.zvmplx'
    }
    { # - Tried using a non-capturing group (?:...) for the open-paren [(] so the paren is
      #   not highlighted as if it was part of the keyword.  No help.
      # - Positive lookahead (?=...) works as desired though to require an open paren
      #   be present, without making it part of the matched/highlighted text.
      # - Use negative lookbehind (?<=[\\w_]) to avoid highlighting array/function names that
      #   end with one of the matched values, like minlength(i).
      'match': '(?<![\\w_])((?i)auto|const|extern|inline|register|restrict|static|volatile|NOSEGMENT|BASED|LENGTH|Addroff|ADDR|ScopeInitial)(?=\\s*[(])'
      'name': 'keyword.control.zvmplx'
    }
]

'repository': {
    'line-too-long-rule': {
      # Anything over 80 characters makes line came up red with 'match': '.*(?<=.{80}).+'
      # (?<=...) = negative lookbehind
      # This tests for 72 chars plus anything BUT a sequence number or whitespace
      'match': '.*(?<=.{72})(([^0-9 \\r\\n]+)|([0-9 \\r\\n]{8}.+))'
      'name': 'invalid.illegal.zvmplx'
    },
    'sequence-number-rule': {
      # This only takes into consideration 8 digits [0-9] after 72 characters
      'match': '(?<=.{72})[0-9]{8}\\n'
      'name': 'comment.line.zvmplx'
    },
    'register-variable-rule': {
      'match': '\\b([R|r]([0-9]|1[0-5]))\\b'
      'name':  'keyword.operator.zvmplx'
    },
    'block-generate-rule': {
      'begin': '((?i)generate)\\s*[;]\\s*([/][*].*)?'
      'beginCaptures':
          '1':
              'name': 'keyword.control.zvmplx'
          '2':
              'name': 'comment.line.zvmplx'
      'end': '((?i)@endgen)\\s*[;]\\s*([*][/])?.*'
      'endCaptures':
          '1':
              'name': 'keyword.control.zvmplx'
          '2':
              'name': 'comment.line.zvmplx'
      'patterns': [
        { 'include': 'source.zvmasm' }  # SIC: zvmasm here
      ]
    },
    'block-comment-rule': {
      'begin': '[/][*]'
      'end': '[*][/]'
      'name': 'comment.block.zvmplx'
    },
    'block-logic-rule': {
      'begin': '^\\s*((?i)[@]\\s*LOGIC)\\s*([;])'
      'beginCaptures':
          '1':
              'name': 'meta.keyword.zvmplx'
          '2':
              'name': 'source.zvmplx'
      'end'  : '^\\s*((?i)[@]\\s*ENDLOGIC)\\s*([;])'
      'endCaptures':
          '1':
              'name': 'meta.keyword.zvmplx'
          '2':
              'name': 'source.zvmplx'
      'name': 'comment.block.zvmplx'
    },
    'line-comment-rule': {
      'begin': '!'
      'end': '\\n'
      'name': 'comment.line.zvmplx'
    },
    # Matching for single quotes around the contants is not required as #signle-quoted-string-rule takes care of it.
    'numeric-constant-rule': {
        # Handles normal decimals as well as decimals written in scientific notation
        'match': '\\b(([0-9]{1,32}[E|e][-][0-9]{1,2})|([0-9]{1,32}([\\.][0-9]+)?))\\b'
        'name': 'constant.numeric.zvmplx'
    },
    'binary-constant-rule': {
        # Handles normal binaries as well as decimans written in scientific notation
        'match': '\\b([\'](([1|0]{1,32}[\.]?[1|0]*)|([1|0]+[E|e][-|+]?[0-9]{1,2}))[\'][B|b])\\b'
        'name': 'constant.numeric.zvmplx'
    },
    'hexadecimal-constant-rule': {
        # Handles normal hexadecimal constants.
        'match': '\\b([\']?[a-fA-Z0-9]{1,32}[\']?[X|x]?)\\b'
        'name': 'constant.numeric.zvmplx'
    },
    'single-quoted-string-rule': {
      # See notes on double-quoted-string-rule, same rules
      'begin': '\''
      'end': '\''
      'name': 'string.quoted.single.zvmplx'
    },
    'double-quoted-string-rule': {
      # Character strings can have an optional trailing: C, S, Z, N
      # Bit       constants can have an optional trailing: H, B
      # If the trailing character exists, it must be followed by a delimiter or line break.
      # TODO Support optional trailing modifiers
      # ((?i)X|B|C|S|Z|N)? following the delimiter works *when the character is present* but fails if the character is a ; or ) or [and so on]
      # - Tried using negative lookahead (?!...) for the "followed by" character so it's not highlighted as part of the string.  (?![A-Za-z0-9_]?) on " followed by | (with no intervening whitespace, as in "s1"||"s2") highlighted the first pipe, which is odd.
      # - \\b fails, by definition.
      # - \\W will NOT work reliably
      'begin': '\"'
      'end': '\"'
      'name': 'string.quoted.double.zvmplx'
    },
    'macro-include-rule': {
      'match': '\\s*((?i)[%]include)\\s+(\\w+)\\s*[(]\\s*(\\w+)\\s*[)]\\s*[;]'
      'captures':
          '1':
              'name': 'support.function.zvmplx'
          '2':
              'name': 'support.type.zvmplx'
          '3':
              'name': 'constant.character.zvmplx'
    },
    'macro-general-rule': {
      # used \\b not \\s+ because the former matches samples like: %foo=bar
      # remove trailing .*[;] so cases like %macrovar="string" allow string rule to match string
      'match': '\\s*((?i)[%?]\\w+)\\b'
      'captures':
          '0':
              'name': 'entity.tag.zvmplx'
          '1':
              'name': 'support.name.zvmplx'
    },
    'label-general-rule': {
      'match': '\\s*(\\w+)\\s*[:]'
      'captures':
          '1':
              'name': 'entity.name.function.zvmplx'
    },
    'eject-control-rule': {
      'match': '((?i)@EJECT\\s*([(].+[)])?\\s*(\\s+(MACRO|NOMACRO))?\\s*(\\s+(COMPILE|NOCOMPILE))?\\s*(\\s+(ASSEMBLE|NOASSEMBLE|ASM|NOASM))?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'space-control-rule': {
      'match': '((?i)@SPACE\\s*([(]\\d+[)])?\\s*(\\s+(MACRO|NOMACRO))?\\s*(\\s+(COMPILE|NOCOMPILE))?\\s*(\\s+(ASSEMBLE|NOASSEMBLE|ASM|NOASM))?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'list-control1-rule': {
      'match': '((?i)@LIST\\s*(\\s+(MACRO|NOMACRO))?\\s*(\\s+(COMPILE|NOCOMPILE))?\\s*(\\s+(ASSEMBLE|NOASSEMBLE|ASM|NOASM))?\\s*(\\s+NOECHO)?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'list-control2-rule': {
      'match': '((?i)@LIST\\s*(\\s+ON|OFF)?\\s*(\\s+MACRO)?\\s*(\\s+COMPILE)?\\s*(\\s+(ASSEMBLE|ASM))?\\s*(\\s+NOECHO)?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'list-control3-rule': {
      'match': '((?i)@LIST\\s*(\\s+(PUSH|POP))?\\s*(\\s+NOECHO)?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'list-control4-rule': {
      'match': '((?i)@LIST\\s*(\\s+(ANNOTATE|NOANNOTATE))?\\s*(\\s+NOECHO)?\\s*;)'
      'name': 'comment.line.zvmplx'
    },
    'begin-statement-rule': {
      # - Use negative lookbehind (?<=[\\w_]) to avoid highlighting names that
      #   end with one of the matched values, like mybegin;
      'match': '(?<![\\w_])((?i)BEGIN\\s*(\\s+(ORDER|REORDER))?\\s*(\\s+(ENVIRONMENT|ENV)\\s*[(]\\s*(PRIMARY|AR)\\s*[)])?)\\s*;'
      'name': 'keyword.control.zvmplx'
    },
    'empty-rule': {
    },
}

# References
# - https://www.sitepoint.com/how-to-write-a-syntax-highlighting-package-for-atom/
# - https://manual.macromates.com/en/language_grammars
# - http://www.regular-expressions.info/characters.html
# - http://www.apeth.com/nonblog/stories/textmatebundle.html
